#!/usr/bin/python

import atexit
atexit.register(lambda: input("\nPress Enter to exit."))

print('          YOOOOO WHATS UP CRONUS !!!           ')

#import serial
import time
from printrun.printcore import printcore

p = printcore('COM5', 115200)




class MachineGCodeProcessingTests(unittest.TestCase):
    def assert_processed_lines(self, line_data, machine):
        """
        Process lines & assert machine's position
        :param line_data: list of tuples [('g1 x2', {'X':2}), ... ]
        """
        for (i, (line_str, expected_pos)) in enumerate(line_data):
            line = Line(line_str)
            if line.block:
                machine.process_block(line.block)
            # Assert possition change correct
            if expected_pos is not None:
                p1 = machine.pos
                p2 = machine.Position(**expected_pos)
                self.assertEqual(p1, p2, "index:%i '%s': %r != %r" % (i, line_str, p1, p2))

    # Rapid Movement
    def test_rapid_abs(self):
        m = Machine()
        m.process_gcodes(GCodeAbsoluteDistanceMode())
        line_data = [
            ('', {}),  # start @ 0,0,0
            ('g0 x0 y10',       {'X':0, 'Y':10}),
            ('   x10 y10',      {'X':10, 'Y':10}),
            ('   x10 y0',       {'X':10, 'Y':0}),
            ('   x0 y0',        {'X':0, 'Y':0}),
        ]
        self.assert_processed_lines(line_data, m)

    def test_rapid_inc(self):
        m = Machine()
        m.process_gcodes(GCodeIncrementalDistanceMode())
        line_data = [
            ('', {}),  # start @ 0,0,0
            ('g0 y10',  {'X':0, 'Y':10}),
            ('   x10',  {'X':10, 'Y':10}),
            ('   y-10', {'X':10, 'Y':0}),
            ('   x-10', {'X':0, 'Y':0}),
        ]
        self.assert_processed_lines(line_data, m)

    # Linearly Interpolated Movement
    def test_linear_abs(self):
        m = Machine()
        m.process_gcodes(GCodeAbsoluteDistanceMode())
        line_data = [
            ('g1 x0 y10',       {'X':0, 'Y':10}),
            ('   x10 y10',      {'X':10, 'Y':10}),
            ('   x10 y0',       {'X':10, 'Y':0}),
            ('   x0 y0',        {'X':0, 'Y':0}),
        ]
        self.assert_processed_lines(line_data, m)

    def test_linear_inc(self):
        m = Machine()
        m.process_gcodes(GCodeIncrementalDistanceMode())
        line_data = [
            ('g1 y10',  {'X':0, 'Y':10}),
            ('   x10',  {'X':10, 'Y':10}),
            ('   y-10', {'X':10, 'Y':0}),
            ('   x-10', {'X':0, 'Y':0}),
        ]
        self.assert_processed_lines(line_data, m)

    # Arc Movement
    def test_arc_abs(self):
        m = Machine()
        m.process_gcodes(
            GCodeAbsoluteDistanceMode(),
            GCodeIncrementalArcDistanceMode(),
        )
        line_data = [
            # Clockwise circle in 4 segments
            ('g2 x0 y10 i5 j5', {'X':0, 'Y':10}),
            ('   x10 y10 i5 j-5', {'X':10, 'Y':10}),
            ('   x10 y0 i-5 j-5', {'X':10, 'Y':0}),
            ('   x0 y0 i-5 j5', {'X':0, 'Y':0}),
            # Counter-clockwise circle in 4 segments
            ('g3 x10 y0 i5 j5', {'X':10, 'Y':0}),
            ('   x10 y10 i-5 j5', {'X':10, 'Y':10}),
            ('   x0 y10 i-5 j-5', {'X':0, 'Y':10}),
            ('   x0 y0 i5 j-5', {'X':0, 'Y':0}),
        ]
        self.assert_processed_lines(line_data, m)

    def test_arc_inc(self):
        m = Machine()
        m.process_gcodes(
            GCodeIncrementalDistanceMode(),
            GCodeIncrementalArcDistanceMode(),
        )
        line_data = [
            # Clockwise circle in 4 segments
            ('g2 y10 i5 j5', {'X':0, 'Y':10}),
            ('   x10 i5 j-5', {'X':10, 'Y':10}),
            ('   y-10 i-5 j-5', {'X':10, 'Y':0}),
            ('   x-10 i-5 j5', {'X':0, 'Y':0}),
            # Counter-clockwise circle in 4 segments
            ('g3 x10 i5 j5', {'X':10, 'Y':0}),
            ('   y10 i-5 j5', {'X':10, 'Y':10}),
            ('   x-10 i-5 j-5', {'X':0, 'Y':10}),
            ('   y-10 i5 j-5', {'X':0, 'Y':0}),
        ]
        self.assert_processed_lines(line_data, m)

    # Canned Drilling Cycles
    def test_canned_return2oldz(self):
        m = Machine()
        m.process_gcodes(
            GCodeAbsoluteDistanceMode(),
            GCodeCannedCycleReturnPrevLevel(),
        )
        line_data = [
            ('g0 z5', {'Z':5}),
            ('g81 x10 y20 z-2 r1', {'X':10, 'Y':20, 'Z':5}),
        ]
        self.assert_processed_lines(line_data, m)

    def test_canned_return2r(self):
        m = Machine()
        m.process_gcodes(
            GCodeAbsoluteDistanceMode(),
            GCodeCannedCycleReturnToR(),
        )
        line_data = [
            ('g0 z5', {'Z':5}),
            ('g81 x10 y20 z-2 r1', {'X':10, 'Y':20, 'Z':1}),
        ]
        self.assert_processed_lines(line_data, m)

    def test_canned_loops(self):
        m = Machine()
        m.process_gcodes(
            GCodeAbsoluteDistanceMode(),
            GCodeCannedCycleReturnPrevLevel(),
        )
        line_data = [
            ('g0 z5', None),
            ('g81 x10 y20 z-2 r1 l2', {'X':10, 'Y':20, 'Z':5}),
            ('g91', None),  # switch to incremental mode
            ('g81 x10 y20 z-2 r1 l2', {'X':30, 'Y':60, 'Z':5}),
        ]
        self.assert_processed_lines(line_data, m)
